{"ast":null,"code":"var _jsxFileName = \"/home/ajun/Documents/HEIG/WEB/lab07_ProjetLibre/7-react-libre-wednesday-un_nom_fun/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport sheep from './assets/1216139922123941827lemmling_Cartoon_sheep.svg.med.png';\nimport cow from './assets/1216139760278927551lemmling_Cartoon_cow.svg.med.png';\nimport pig from './assets/1245696592590661388bloodsong_Pig-RoundCartoon.svg.med.png';\nimport goat from './assets/12161376021593473697lemmling_Cartoon_goat.svg.med.png';\nimport cat from './assets/12161397191917421375lemmling_Cartoon_cat.svg.med.png';\nimport chicken from './assets/1245696568353635238bloodsong_Chicken-RoundCartoon.svg.med.png';\nimport heart from './assets/heart_shiny.png';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst animals = new Map([['sheep', sheep], ['cow', cow], ['pig', pig], ['goat', goat], ['cat', cat], ['chicken', chicken]]);\n\n/**\n * Component that represents the main application. It displays a clicker game where the user can click on a pet to pet\n * it. The pet will receive the click and the user will see a heart animation. The user can also type a word that will\n * count as many clicks at once.\n * @constructor App\n */\nfunction App() {\n  _s();\n  const [isPulsing, setIsPulsing] = useState(false);\n  const [showHeart, setShowHeart] = useState(false);\n  const [heartStyle, setHeartStyle] = useState({});\n  const [clientId, setClientId] = useState(null);\n  const [nbGlobalClicksPerPet, setNbGlobalClicksPerPet] = useState(0);\n  const [nbGlobalClicks, setNbGlobalClicks] = useState(0);\n  const [pet, setPet] = useState('sheep');\n  const [word, setWord] = useState('');\n  const ws = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [typingWord, setTypingWord] = useState('');\n  const [ableToType, setAbleToType] = useState(false);\n  useEffect(() => {\n    document.title = \"Farm Clicker\";\n  }, []);\n  useEffect(() => {\n    ws.current = new WebSocket('ws://localhost:8080');\n    ws.current.onopen = () => {\n      console.log('WebSocket client connection opened');\n      setIsLoading(true);\n    };\n    ws.current.onmessage = event => {\n      // Handle incoming messages from the server\n      try {\n        const message = JSON.parse(event.data);\n        console.log(message);\n        switch (message.type) {\n          case \"clientId\":\n            setClientId(message.id);\n            break;\n          case \"nbGlobalClicks\":\n            setNbGlobalClicks(message.global);\n            setNbGlobalClicksPerPet(message.current);\n            break;\n          case \"changePet\":\n            setPet(message.value);\n            break;\n          case \"word\":\n            setWord(message.value);\n            setAbleToType(true);\n            break;\n          default:\n            console.log('Received:', event.data);\n        }\n      } catch (error) {\n        console.log('Received a non-JSON message:', event.data);\n      }\n      setIsLoading(false);\n    };\n    ws.current.onclose = () => {\n      console.log('WebSocket client connection closed');\n    };\n    const wsCurrent = ws.current;\n\n    // Clean up function to close the WebSocket connection when the component unmounts\n    return () => {\n      wsCurrent.close();\n    };\n  }, []);\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.key === 'Backspace') {\n        setTypingWord(prevWord => prevWord.slice(0, -1));\n      } else if (event.key.match(/^[a-zA-Z]$/)) {\n        setTypingWord(prevWord => prevWord + event.key);\n      } else if (event.key === 'Enter') {\n        checkWord();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [typingWord, word, ableToType]); // Add typingWord and word as dependencies\n\n  const checkWord = () => {\n    if (typingWord === word && ableToType) {\n      setAbleToType(false);\n      setTypingWord('');\n      setWord('');\n      if (ws.current) {\n        ws.current.send(JSON.stringify({\n          type: 'click',\n          value: 30\n        }));\n        ws.current.send(JSON.stringify({\n          type: 'word',\n          value: clientId\n        }));\n      }\n    } else setAbleToType(true);\n  };\n  const handleClick = () => {\n    setIsPulsing(true);\n    setShowHeart(true);\n    setHeartStyle({\n      left: `calc(50% + ${Math.random() * 100}px)`,\n      top: `calc(50% + ${Math.random() * 100 - 100}px)`\n    });\n    setTimeout(() => {\n      setIsPulsing(false);\n      setShowHeart(false);\n    }, 500);\n    if (ws.current) {\n      ws.current.send(JSON.stringify({\n        type: 'click',\n        value: 1\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ClientInfo, {\n        clientId: clientId,\n        nbGlobalClicks: nbGlobalClicks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Click to pet!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(Pet, {\n          image: pet,\n          onClick: handleClick,\n          isPulsing: isPulsing\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Heart, {\n          showHeart: showHeart,\n          src: heart,\n          style: heartStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font\",\n          children: [\"I received \", nbGlobalClicksPerPet, \" pets\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TypingRandomWord, {\n          word: word,\n          typingWord: typingWord\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n}\n\n/**\n * The props for the pet component\n */\n_s(App, \"MCZt4kAa9UMl7GBPlZL+7tZ70iY=\");\n_c = App;\n/**\n * The props for the heart component\n */\n/**\n * The props for the client info component\n */\n/**\n * The props for the typing random word component\n */\n/**\n * The loading component\n * @constructor Loading\n */\nconst Loading = () => /*#__PURE__*/_jsxDEV(\"p\", {\n  className: \"loading\",\n  children: \"Loading...\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 209,\n  columnNumber: 23\n}, this);\n\n/**\n * The pet component\n * @param image The image of the pet\n * @param onClick The function to call when the pet is clicked\n * @param isPulsing Whether the pet should be pulsing\n * @constructor Pet\n */\n_c2 = Loading;\nconst Pet = ({\n  image,\n  onClick,\n  isPulsing\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: animals.get(image),\n    onClick: onClick,\n    alt: \"animal to love\",\n    className: `${isPulsing ? 'pulse' : ''}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 9\n  }, this);\n};\n\n/**\n * The heart component\n * @param showHeart Whether the heart should be shown\n * @param src The source of the heart image\n * @param style The style of the heart\n * @constructor Heart\n */\n_c3 = Pet;\nconst Heart = ({\n  showHeart,\n  src,\n  style\n}) => {\n  if (!showHeart) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: src,\n    className: \"heart\",\n    alt: \"heart\",\n    style: style\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 9\n  }, this);\n};\n\n/**\n * The client info component\n * @param clientId The client ID\n * @param nbGlobalClicks The number of global clicks\n * @constructor ClientInfo\n */\n_c4 = Heart;\nconst ClientInfo = ({\n  clientId,\n  nbGlobalClicks\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"row\",\n  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"font\",\n    children: [\"Client ID: \", clientId]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"font\",\n    children: [\"Global clicks : \", nbGlobalClicks]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 9\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 252,\n  columnNumber: 5\n}, this);\n\n/**\n * The typing random word component\n * @param word The random word to type\n * @param typingWord The word being typed\n * @constructor TypingRandomWord\n */\n_c5 = ClientInfo;\nconst TypingRandomWord = ({\n  word,\n  typingWord\n}) => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"font\",\n    children: [\"Type this word: \", word]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"font reduce-margin\",\n    children: [\"You are typing: \", typingWord]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 9\n  }, this)]\n}, void 0, true);\n_c6 = TypingRandomWord;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Loading\");\n$RefreshReg$(_c3, \"Pet\");\n$RefreshReg$(_c4, \"Heart\");\n$RefreshReg$(_c5, \"ClientInfo\");\n$RefreshReg$(_c6, \"TypingRandomWord\");","map":{"version":3,"names":["React","useEffect","useRef","useState","sheep","cow","pig","goat","cat","chicken","heart","jsxDEV","_jsxDEV","Fragment","_Fragment","animals","Map","App","_s","isPulsing","setIsPulsing","showHeart","setShowHeart","heartStyle","setHeartStyle","clientId","setClientId","nbGlobalClicksPerPet","setNbGlobalClicksPerPet","nbGlobalClicks","setNbGlobalClicks","pet","setPet","word","setWord","ws","isLoading","setIsLoading","typingWord","setTypingWord","ableToType","setAbleToType","document","title","current","WebSocket","onopen","console","log","onmessage","event","message","JSON","parse","data","type","id","global","value","error","onclose","wsCurrent","close","handleKeyDown","key","prevWord","slice","match","checkWord","window","addEventListener","removeEventListener","send","stringify","handleClick","left","Math","random","top","setTimeout","children","Loading","fileName","_jsxFileName","lineNumber","columnNumber","ClientInfo","className","Pet","image","onClick","Heart","src","style","TypingRandomWord","_c","_c2","get","alt","_c3","_c4","_c5","_c6","$RefreshReg$"],"sources":["/home/ajun/Documents/HEIG/WEB/lab07_ProjetLibre/7-react-libre-wednesday-un_nom_fun/src/App.tsx"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\n\nimport sheep from './assets/1216139922123941827lemmling_Cartoon_sheep.svg.med.png'\nimport cow from './assets/1216139760278927551lemmling_Cartoon_cow.svg.med.png'\nimport pig from './assets/1245696592590661388bloodsong_Pig-RoundCartoon.svg.med.png'\nimport goat from './assets/12161376021593473697lemmling_Cartoon_goat.svg.med.png'\nimport cat from './assets/12161397191917421375lemmling_Cartoon_cat.svg.med.png'\nimport chicken from './assets/1245696568353635238bloodsong_Chicken-RoundCartoon.svg.med.png'\nimport heart from './assets/heart_shiny.png'\nimport './App.css'\n\nconst animals = new Map<string, string>([\n    ['sheep', sheep],\n    ['cow', cow],\n    ['pig', pig],\n    ['goat', goat],\n    ['cat', cat],\n    ['chicken', chicken]\n]);\n\n/**\n * Component that represents the main application. It displays a clicker game where the user can click on a pet to pet\n * it. The pet will receive the click and the user will see a heart animation. The user can also type a word that will\n * count as many clicks at once.\n * @constructor App\n */\nfunction App() {\n    const [isPulsing, setIsPulsing] = useState<boolean>(false);\n    const [showHeart, setShowHeart] = useState<boolean>(false);\n    const [heartStyle, setHeartStyle] = useState<React.CSSProperties>({});\n    const [clientId, setClientId] = useState<string | null>(null);\n    const [nbGlobalClicksPerPet, setNbGlobalClicksPerPet] = useState<number>(0);\n    const [nbGlobalClicks, setNbGlobalClicks] = useState<number>(0);\n    const [pet, setPet] = useState<string>('sheep');\n    const [word, setWord] = useState<string>('');\n    const ws = useRef<WebSocket | null>(null);\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [typingWord, setTypingWord] = useState<string>('');\n    const [ableToType, setAbleToType] = useState<boolean>(false);\n\n    useEffect(():void => {\n        document.title = \"Farm Clicker\";\n    }, []);\n\n    useEffect(() => {\n\n        ws.current = new WebSocket('ws://localhost:8080');\n\n        ws.current.onopen = () => {\n            console.log('WebSocket client connection opened');\n            setIsLoading(true);\n        };\n\n        ws.current.onmessage = (event: MessageEvent<any>) => {\n            // Handle incoming messages from the server\n            try {\n                const message = JSON.parse(event.data);\n                console.log(message);\n                switch (message.type) {\n                    case \"clientId\":\n                        setClientId(message.id);\n                        break;\n                    case \"nbGlobalClicks\":\n                        setNbGlobalClicks(message.global);\n                        setNbGlobalClicksPerPet(message.current);\n                        break;\n                    case \"changePet\" :\n                        setPet(message.value);\n                        break;\n                    case \"word\":\n                        setWord(message.value);\n                        setAbleToType(true);\n                        break;\n                    default:\n                        console.log('Received:', event.data);\n                }\n            } catch (error) {\n                console.log('Received a non-JSON message:', event.data);\n            }\n            setIsLoading(false);\n        };\n\n\n        ws.current.onclose = () => {\n            console.log('WebSocket client connection closed');\n        };\n\n        const wsCurrent: WebSocket = ws.current;\n\n        // Clean up function to close the WebSocket connection when the component unmounts\n        return (): void => {\n            wsCurrent.close();\n        };\n    }, []);\n\n    useEffect(() => {\n        const handleKeyDown = (event: KeyboardEvent) => {\n            if (event.key === 'Backspace') {\n                setTypingWord(prevWord => prevWord.slice(0, -1));\n            } else if (event.key.match(/^[a-zA-Z]$/)) {\n                setTypingWord(prevWord => prevWord + event.key);\n            } else if (event.key === 'Enter') {\n                checkWord();\n            }\n        }\n\n        window.addEventListener('keydown', handleKeyDown);\n\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [typingWord, word, ableToType]); // Add typingWord and word as dependencies\n\n\n    const checkWord = (): void => {\n        if (typingWord === word && ableToType) {\n            setAbleToType(false);\n            setTypingWord('');\n            setWord('');\n            if (ws.current) {\n                ws.current.send(JSON.stringify({type: 'click', value: 30}));\n                ws.current.send(JSON.stringify({type: 'word', value: clientId}));\n            }\n        } else\n            setAbleToType(true);\n    }\n\n\n    const handleClick = (): void => {\n\n        setIsPulsing(true);\n        setShowHeart(true);\n        setHeartStyle({\n            left: `calc(50% + ${Math.random() * 100}px)`,\n            top: `calc(50% + ${Math.random() * 100 - 100}px)`,\n        });\n        setTimeout(() => {\n            setIsPulsing(false);\n            setShowHeart(false);\n        }, 500);\n\n        if (ws.current) {\n            ws.current.send(JSON.stringify({type: 'click', value: 1}));\n        }\n\n    };\n\n    return (\n        <>\n            {isLoading ? (\n                <Loading />\n            ) : (\n                <>\n                    <ClientInfo clientId={clientId} nbGlobalClicks={nbGlobalClicks} />\n                    <h1>Click to pet!</h1>\n                    <div className=\"card\">\n                        <Pet image={pet} onClick={handleClick} isPulsing={isPulsing}/>\n                        <Heart showHeart={showHeart} src={heart} style={heartStyle}/>\n                        <p className=\"font\">\n                            I received {nbGlobalClicksPerPet} pets\n                        </p>\n                        <TypingRandomWord word={word} typingWord={typingWord} />\n                    </div>\n\n                </>\n            )}\n        </>\n    )\n}\n\n/**\n * The props for the pet component\n */\ninterface PetProps {\n    image: string;\n    onClick: () => void;\n    isPulsing: boolean;\n}\n\n/**\n * The props for the heart component\n */\ninterface HeartProps {\n    showHeart: boolean;\n    src: string;\n    style: React.CSSProperties;\n}\n\n/**\n * The props for the client info component\n */\ninterface ClientInfoProps {\n    clientId: string | null;\n    nbGlobalClicks: number;\n}\n\n/**\n * The props for the typing random word component\n */\ninterface TypingRandomWordProps {\n    word: string;\n    typingWord: string;\n}\n\n/**\n * The loading component\n * @constructor Loading\n */\nconst Loading = () => <p className=\"loading\">Loading...</p>;\n\n/**\n * The pet component\n * @param image The image of the pet\n * @param onClick The function to call when the pet is clicked\n * @param isPulsing Whether the pet should be pulsing\n * @constructor Pet\n */\nconst Pet: React.FC<PetProps> = ({image, onClick, isPulsing}:PetProps) => {\n    return (\n        <img\n            src={animals.get(image)}\n            onClick={onClick}\n            alt=\"animal to love\"\n            className={`${isPulsing ? 'pulse' : ''}`}\n        />\n    );\n}\n\n/**\n * The heart component\n * @param showHeart Whether the heart should be shown\n * @param src The source of the heart image\n * @param style The style of the heart\n * @constructor Heart\n */\nconst Heart: React.FC<HeartProps> = ({showHeart, src, style}:HeartProps) => {\n    if (!showHeart) {\n        return null;\n    }\n    return (\n        <img src={src} className=\"heart\" alt=\"heart\" style={style}/>\n    );\n}\n\n/**\n * The client info component\n * @param clientId The client ID\n * @param nbGlobalClicks The number of global clicks\n * @constructor ClientInfo\n */\nconst ClientInfo: React.FC<ClientInfoProps> = ({ clientId, nbGlobalClicks }:ClientInfoProps) => (\n    <div className=\"row\">\n        <p className=\"font\">Client ID: {clientId}</p>\n        <p className=\"font\">Global clicks : {nbGlobalClicks}</p>\n    </div>\n);\n\n/**\n * The typing random word component\n * @param word The random word to type\n * @param typingWord The word being typed\n * @constructor TypingRandomWord\n */\nconst TypingRandomWord: React.FC<TypingRandomWordProps> = ({ word, typingWord }:TypingRandomWordProps) => (\n    <>\n        <p className=\"font\">Type this word: {word}</p>\n        <p className=\"font reduce-margin\">You are typing: {typingWord}</p>\n    </>\n);\nexport default App\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAO,OAAO;AAExD,OAAOC,KAAK,MAAM,gEAAgE;AAClF,OAAOC,GAAG,MAAM,8DAA8D;AAC9E,OAAOC,GAAG,MAAM,oEAAoE;AACpF,OAAOC,IAAI,MAAM,gEAAgE;AACjF,OAAOC,GAAG,MAAM,+DAA+D;AAC/E,OAAOC,OAAO,MAAM,wEAAwE;AAC5F,OAAOC,KAAK,MAAM,0BAA0B;AAC5C,OAAO,WAAW;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAElB,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAiB,CACpC,CAAC,OAAO,EAAEZ,KAAK,CAAC,EAChB,CAAC,KAAK,EAAEC,GAAG,CAAC,EACZ,CAAC,KAAK,EAAEC,GAAG,CAAC,EACZ,CAAC,MAAM,EAAEC,IAAI,CAAC,EACd,CAAC,KAAK,EAAEC,GAAG,CAAC,EACZ,CAAC,SAAS,EAAEC,OAAO,CAAC,CACvB,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,SAASQ,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAU,KAAK,CAAC;EAC1D,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAU,KAAK,CAAC;EAC1D,MAAM,CAACoB,UAAU,EAAEC,aAAa,CAAC,GAAGrB,QAAQ,CAAsB,CAAC,CAAC,CAAC;EACrE,MAAM,CAACsB,QAAQ,EAAEC,WAAW,CAAC,GAAGvB,QAAQ,CAAgB,IAAI,CAAC;EAC7D,MAAM,CAACwB,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGzB,QAAQ,CAAS,CAAC,CAAC;EAC3E,MAAM,CAAC0B,cAAc,EAAEC,iBAAiB,CAAC,GAAG3B,QAAQ,CAAS,CAAC,CAAC;EAC/D,MAAM,CAAC4B,GAAG,EAAEC,MAAM,CAAC,GAAG7B,QAAQ,CAAS,OAAO,CAAC;EAC/C,MAAM,CAAC8B,IAAI,EAAEC,OAAO,CAAC,GAAG/B,QAAQ,CAAS,EAAE,CAAC;EAC5C,MAAMgC,EAAE,GAAGjC,MAAM,CAAmB,IAAI,CAAC;EACzC,MAAM,CAACkC,SAAS,EAAEC,YAAY,CAAC,GAAGlC,QAAQ,CAAU,IAAI,CAAC;EACzD,MAAM,CAACmC,UAAU,EAAEC,aAAa,CAAC,GAAGpC,QAAQ,CAAS,EAAE,CAAC;EACxD,MAAM,CAACqC,UAAU,EAAEC,aAAa,CAAC,GAAGtC,QAAQ,CAAU,KAAK,CAAC;EAE5DF,SAAS,CAAC,MAAW;IACjByC,QAAQ,CAACC,KAAK,GAAG,cAAc;EACnC,CAAC,EAAE,EAAE,CAAC;EAEN1C,SAAS,CAAC,MAAM;IAEZkC,EAAE,CAACS,OAAO,GAAG,IAAIC,SAAS,CAAC,qBAAqB,CAAC;IAEjDV,EAAE,CAACS,OAAO,CAACE,MAAM,GAAG,MAAM;MACtBC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACjDX,YAAY,CAAC,IAAI,CAAC;IACtB,CAAC;IAEDF,EAAE,CAACS,OAAO,CAACK,SAAS,GAAIC,KAAwB,IAAK;MACjD;MACA,IAAI;QACA,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;QACtCP,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC;QACpB,QAAQA,OAAO,CAACI,IAAI;UAChB,KAAK,UAAU;YACX7B,WAAW,CAACyB,OAAO,CAACK,EAAE,CAAC;YACvB;UACJ,KAAK,gBAAgB;YACjB1B,iBAAiB,CAACqB,OAAO,CAACM,MAAM,CAAC;YACjC7B,uBAAuB,CAACuB,OAAO,CAACP,OAAO,CAAC;YACxC;UACJ,KAAK,WAAW;YACZZ,MAAM,CAACmB,OAAO,CAACO,KAAK,CAAC;YACrB;UACJ,KAAK,MAAM;YACPxB,OAAO,CAACiB,OAAO,CAACO,KAAK,CAAC;YACtBjB,aAAa,CAAC,IAAI,CAAC;YACnB;UACJ;YACIM,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEE,KAAK,CAACI,IAAI,CAAC;QAC5C;MACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;QACZZ,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEE,KAAK,CAACI,IAAI,CAAC;MAC3D;MACAjB,YAAY,CAAC,KAAK,CAAC;IACvB,CAAC;IAGDF,EAAE,CAACS,OAAO,CAACgB,OAAO,GAAG,MAAM;MACvBb,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;IACrD,CAAC;IAED,MAAMa,SAAoB,GAAG1B,EAAE,CAACS,OAAO;;IAEvC;IACA,OAAO,MAAY;MACfiB,SAAS,CAACC,KAAK,CAAC,CAAC;IACrB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN7D,SAAS,CAAC,MAAM;IACZ,MAAM8D,aAAa,GAAIb,KAAoB,IAAK;MAC5C,IAAIA,KAAK,CAACc,GAAG,KAAK,WAAW,EAAE;QAC3BzB,aAAa,CAAC0B,QAAQ,IAAIA,QAAQ,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACpD,CAAC,MAAM,IAAIhB,KAAK,CAACc,GAAG,CAACG,KAAK,CAAC,YAAY,CAAC,EAAE;QACtC5B,aAAa,CAAC0B,QAAQ,IAAIA,QAAQ,GAAGf,KAAK,CAACc,GAAG,CAAC;MACnD,CAAC,MAAM,IAAId,KAAK,CAACc,GAAG,KAAK,OAAO,EAAE;QAC9BI,SAAS,CAAC,CAAC;MACf;IACJ,CAAC;IAEDC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEP,aAAa,CAAC;IAEjD,OAAO,MAAM;MACTM,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAER,aAAa,CAAC;IACxD,CAAC;EACL,CAAC,EAAE,CAACzB,UAAU,EAAEL,IAAI,EAAEO,UAAU,CAAC,CAAC,CAAC,CAAC;;EAGpC,MAAM4B,SAAS,GAAGA,CAAA,KAAY;IAC1B,IAAI9B,UAAU,KAAKL,IAAI,IAAIO,UAAU,EAAE;MACnCC,aAAa,CAAC,KAAK,CAAC;MACpBF,aAAa,CAAC,EAAE,CAAC;MACjBL,OAAO,CAAC,EAAE,CAAC;MACX,IAAIC,EAAE,CAACS,OAAO,EAAE;QACZT,EAAE,CAACS,OAAO,CAAC4B,IAAI,CAACpB,IAAI,CAACqB,SAAS,CAAC;UAAClB,IAAI,EAAE,OAAO;UAAEG,KAAK,EAAE;QAAE,CAAC,CAAC,CAAC;QAC3DvB,EAAE,CAACS,OAAO,CAAC4B,IAAI,CAACpB,IAAI,CAACqB,SAAS,CAAC;UAAClB,IAAI,EAAE,MAAM;UAAEG,KAAK,EAAEjC;QAAQ,CAAC,CAAC,CAAC;MACpE;IACJ,CAAC,MACGgB,aAAa,CAAC,IAAI,CAAC;EAC3B,CAAC;EAGD,MAAMiC,WAAW,GAAGA,CAAA,KAAY;IAE5BtD,YAAY,CAAC,IAAI,CAAC;IAClBE,YAAY,CAAC,IAAI,CAAC;IAClBE,aAAa,CAAC;MACVmD,IAAI,EAAE,cAAcC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,KAAK;MAC5CC,GAAG,EAAE,cAAcF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG;IAChD,CAAC,CAAC;IACFE,UAAU,CAAC,MAAM;MACb3D,YAAY,CAAC,KAAK,CAAC;MACnBE,YAAY,CAAC,KAAK,CAAC;IACvB,CAAC,EAAE,GAAG,CAAC;IAEP,IAAIa,EAAE,CAACS,OAAO,EAAE;MACZT,EAAE,CAACS,OAAO,CAAC4B,IAAI,CAACpB,IAAI,CAACqB,SAAS,CAAC;QAAClB,IAAI,EAAE,OAAO;QAAEG,KAAK,EAAE;MAAC,CAAC,CAAC,CAAC;IAC9D;EAEJ,CAAC;EAED,oBACI9C,OAAA,CAAAE,SAAA;IAAAkE,QAAA,EACK5C,SAAS,gBACNxB,OAAA,CAACqE,OAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAEXzE,OAAA,CAAAE,SAAA;MAAAkE,QAAA,gBACIpE,OAAA,CAAC0E,UAAU;QAAC7D,QAAQ,EAAEA,QAAS;QAACI,cAAc,EAAEA;MAAe;QAAAqD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAClEzE,OAAA;QAAAoE,QAAA,EAAI;MAAa;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtBzE,OAAA;QAAK2E,SAAS,EAAC,MAAM;QAAAP,QAAA,gBACjBpE,OAAA,CAAC4E,GAAG;UAACC,KAAK,EAAE1D,GAAI;UAAC2D,OAAO,EAAEhB,WAAY;UAACvD,SAAS,EAAEA;QAAU;UAAA+D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eAC9DzE,OAAA,CAAC+E,KAAK;UAACtE,SAAS,EAAEA,SAAU;UAACuE,GAAG,EAAElF,KAAM;UAACmF,KAAK,EAAEtE;QAAW;UAAA2D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eAC7DzE,OAAA;UAAG2E,SAAS,EAAC,MAAM;UAAAP,QAAA,GAAC,aACL,EAACrD,oBAAoB,EAAC,OACrC;QAAA;UAAAuD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACJzE,OAAA,CAACkF,gBAAgB;UAAC7D,IAAI,EAAEA,IAAK;UAACK,UAAU,EAAEA;QAAW;UAAA4C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvD,CAAC;IAAA,eAER;EACL,gBACH,CAAC;AAEX;;AAEA;AACA;AACA;AAFAnE,EAAA,CAhJSD,GAAG;AAAA8E,EAAA,GAAH9E,GAAG;AAyJZ;AACA;AACA;AAOA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA,MAAMgE,OAAO,GAAGA,CAAA,kBAAMrE,OAAA;EAAG2E,SAAS,EAAC,SAAS;EAAAP,QAAA,EAAC;AAAU;EAAAE,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAG,CAAC;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AANAW,GAAA,GAFMf,OAAO;AASb,MAAMO,GAAuB,GAAGA,CAAC;EAACC,KAAK;EAAEC,OAAO;EAAEvE;AAAkB,CAAC,KAAK;EACtE,oBACIP,OAAA;IACIgF,GAAG,EAAE7E,OAAO,CAACkF,GAAG,CAACR,KAAK,CAAE;IACxBC,OAAO,EAAEA,OAAQ;IACjBQ,GAAG,EAAC,gBAAgB;IACpBX,SAAS,EAAE,GAAGpE,SAAS,GAAG,OAAO,GAAG,EAAE;EAAG;IAAA+D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AANAc,GAAA,GAXMX,GAAuB;AAkB7B,MAAMG,KAA2B,GAAGA,CAAC;EAACtE,SAAS;EAAEuE,GAAG;EAAEC;AAAgB,CAAC,KAAK;EACxE,IAAI,CAACxE,SAAS,EAAE;IACZ,OAAO,IAAI;EACf;EACA,oBACIT,OAAA;IAAKgF,GAAG,EAAEA,GAAI;IAACL,SAAS,EAAC,OAAO;IAACW,GAAG,EAAC,OAAO;IAACL,KAAK,EAAEA;EAAM;IAAAX,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AAEpE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AALAe,GAAA,GATMT,KAA2B;AAejC,MAAML,UAAqC,GAAGA,CAAC;EAAE7D,QAAQ;EAAEI;AAA+B,CAAC,kBACvFjB,OAAA;EAAK2E,SAAS,EAAC,KAAK;EAAAP,QAAA,gBAChBpE,OAAA;IAAG2E,SAAS,EAAC,MAAM;IAAAP,QAAA,GAAC,aAAW,EAACvD,QAAQ;EAAA;IAAAyD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC,eAC7CzE,OAAA;IAAG2E,SAAS,EAAC,MAAM;IAAAP,QAAA,GAAC,kBAAgB,EAACnD,cAAc;EAAA;IAAAqD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AAAA;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACvD,CACR;;AAED;AACA;AACA;AACA;AACA;AACA;AALAgB,GAAA,GAPMf,UAAqC;AAa3C,MAAMQ,gBAAiD,GAAGA,CAAC;EAAE7D,IAAI;EAAEK;AAAiC,CAAC,kBACjG1B,OAAA,CAAAE,SAAA;EAAAkE,QAAA,gBACIpE,OAAA;IAAG2E,SAAS,EAAC,MAAM;IAAAP,QAAA,GAAC,kBAAgB,EAAC/C,IAAI;EAAA;IAAAiD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC,eAC9CzE,OAAA;IAAG2E,SAAS,EAAC,oBAAoB;IAAAP,QAAA,GAAC,kBAAgB,EAAC1C,UAAU;EAAA;IAAA4C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AAAA,eACpE,CACL;AAACiB,GAAA,GALIR,gBAAiD;AAMvD,eAAe7E,GAAG;AAAA,IAAA8E,EAAA,EAAAC,GAAA,EAAAG,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;AAAAC,YAAA,CAAAR,EAAA;AAAAQ,YAAA,CAAAP,GAAA;AAAAO,YAAA,CAAAJ,GAAA;AAAAI,YAAA,CAAAH,GAAA;AAAAG,YAAA,CAAAF,GAAA;AAAAE,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}