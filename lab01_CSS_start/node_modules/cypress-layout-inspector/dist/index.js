'use strict';

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var config = {
  excludePadding: false,
  threshold: 0
};

var configure = function configure(opts) {
  config = _objectSpread2(_objectSpread2({}, config), opts);
};

var getConfiguration = function getConfiguration() {
  var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
  if (key !== undefined) return config[key];
  return config;
};

var getElement = function getElement(subject) {
  var element;

  if (subject == null) {
    throw new Error("Expected to find element: `".concat(subject, "`, but never found it."));
  }

  if (typeof subject === 'string') {
    var _Cypress$$ = Cypress.$(subject);

    var _Cypress$$2 = _slicedToArray(_Cypress$$, 1);

    element = _Cypress$$2[0];
  }

  if (subject.constructor.name === 'jQuery') {
    var _subject = _slicedToArray(subject, 1);

    element = _subject[0];
  }

  if (element === undefined) {
    throw new Error("Expected to find element: `".concat(subject, "`, but never found it."));
  }

  return element;
};

var Rect = function Rect(subject) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$canExcludePaddin = _ref.canExcludePadding,
      canExcludePadding = _ref$canExcludePaddin === void 0 ? true : _ref$canExcludePaddin;

  _classCallCheck(this, Rect);

  var element = getElement(subject);
  var shape = element.getBoundingClientRect();
  this.top = shape.top;
  this.left = shape.left;
  this.bottom = shape.bottom;
  this.right = shape.right;
  this.width = shape.width;
  this.height = shape.height;

  if (canExcludePadding && getConfiguration('excludePadding')) {
    var computed = getComputedStyle(element);
    this.top += parseFloat(computed.paddingTop);
    this.left += parseFloat(computed.paddingLeft);
    this.bottom -= parseFloat(computed.paddingBottom);
    this.right -= parseFloat(computed.paddingRight);
    this.width -= parseFloat(computed.paddingLeft) + parseFloat(computed.paddingRight);
    this.height -= parseFloat(computed.paddingTop) + parseFloat(computed.paddingBottom);
  }
};

var getSelector = function getSelector(subject) {
  if (subject.constructor.name === 'jQuery') {
    // TODO: use same logic as Cypress to build selector
    var _subject = _slicedToArray(subject, 1),
        element = _subject[0];

    var tag = element.nodeName.toLowerCase();

    var classes = _toConsumableArray(element.classList.values()).map(function (v) {
      return ".".concat(v);
    }).join();

    return "<".concat(tag).concat(classes, ">");
  }

  return subject;
};

var withinThreshold = function withinThreshold(actual, target) {
  var threshold = getConfiguration('threshold');
  return actual >= target - threshold && actual <= target + threshold;
};

var alignment = (function (_chai) {
  function verticallyAligned(element) {
    var edge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all';
    var source = new Rect(this._obj),
        target = new Rect(element);
    var topAlignDiff = source.top - target.top;
    var bottomAlignDiff = -(source.bottom - target.bottom);
    var condition;

    switch (edge) {
      case 'top':
        condition = withinThreshold(topAlignDiff, 0);
        break;

      case 'bottom':
        condition = withinThreshold(bottomAlignDiff, 0);
        break;

      case 'centered':
        condition = withinThreshold(topAlignDiff - bottomAlignDiff, 0);
        break;

      case 'all':
      default:
        condition = withinThreshold(topAlignDiff, 0) && withinThreshold(bottomAlignDiff, 0);
    }

    var targetSelector = getSelector(element);
    return this.assert(condition, "expected #{this} to be vertically aligned ".concat(edge, " with ").concat(targetSelector), "expected #{this} not to be vertically aligned ".concat(edge, " with ").concat(targetSelector));
  }

  function horizontallyAligned(element) {
    var edge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all';
    var source = new Rect(this._obj),
        target = new Rect(element);
    var leftAlignDiff = source.left - target.left;
    var rightAlignDiff = -(source.right - target.right);
    var condition;

    switch (edge) {
      case 'left':
        condition = withinThreshold(leftAlignDiff, 0);
        break;

      case 'right':
        condition = withinThreshold(rightAlignDiff, 0);
        break;

      case 'centered':
        condition = withinThreshold(leftAlignDiff - rightAlignDiff, 0);
        break;

      case 'all':
      default:
        condition = withinThreshold(leftAlignDiff, 0) && withinThreshold(rightAlignDiff, 0);
    }

    var targetSelector = getSelector(element);
    return this.assert(condition, "expected #{this} to be horizontally aligned ".concat(edge, " with ").concat(targetSelector), "expected #{this} not to be horizontally aligned ".concat(edge, " with ").concat(targetSelector));
  }

  _chai.Assertion.addMethod('horizontallyAligned', horizontallyAligned);

  _chai.Assertion.addMethod('verticallyAligned', verticallyAligned);
});

var calculateDifferences = function calculateDifferences(source, target) {
  return {
    top: source.top - target.top,
    left: source.left - target.left,
    right: -(source.right - target.right),
    bottom: -(source.bottom - target.bottom)
  };
};

var position = (function (_chai) {
  function rightOf(element) {
    var distance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
    var source = new Rect(this._obj),
        target = new Rect(element);
    var actual = source.left - target.right;
    var targetSelector = getSelector(element);

    if (distance === undefined) {
      return this.assert(actual >= 0, "expected #{this} to be right of ".concat(targetSelector), "expected #{this} not to be right of ".concat(targetSelector));
    }

    return this.assert(actual === distance || withinThreshold(actual, distance), "expected #{this} to be right of ".concat(targetSelector, " by #{exp}, but the value was #{act}"), "expected #{this} not to be right of ".concat(targetSelector, " by #{exp}, but the value was #{act}"), distance, actual);
  }

  function leftOf(element) {
    var distance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
    var source = new Rect(this._obj),
        target = new Rect(element);
    var actual = target.left - source.right;
    var targetSelector = getSelector(element);

    if (distance === undefined) {
      return this.assert(actual >= 0, "expected #{this} to be left of ".concat(targetSelector), "expected #{this} not to be left of ".concat(targetSelector));
    }

    return this.assert(actual === distance || withinThreshold(actual, distance), "expected #{this} to be left of ".concat(targetSelector, " by #{exp}, but the value was #{act}"), "expected #{this} not to be left of ".concat(targetSelector, " by #{exp}, but the value was #{act}"), distance, actual);
  }

  function inside(element, distances) {
    var source = new Rect(this._obj),
        target = new Rect(element, {
      canExcludePadding: false
    });
    var differences = calculateDifferences(source, target);
    var targetSelector = getSelector(element);

    if (distances === undefined) {
      return this.assert(source.left >= target.left && source.right <= target.right && source.top >= target.top && source.bottom <= target.bottom, "expected #{this} to be inside of #{exp}, but the value was #{act}", "expected #{this} not to be inside of #{exp}, but the value was #{act}", targetSelector, JSON.stringify(differences));
    }

    return this.assert(Object.keys(distances).every(function (key) {
      var distance = distances[key];
      var actual = differences[key];
      return actual === distance || withinThreshold(actual, distance);
    }), "expected #{this} to be inside of ".concat(targetSelector, " by #{exp}, but the value was #{act}"), "expected #{this} not to be inside of ".concat(targetSelector, " by #{exp}, but the value was #{act}"), JSON.stringify(distances), JSON.stringify(differences));
  }

  _chai.Assertion.addMethod('rightOf', rightOf);

  _chai.Assertion.addMethod('leftOf', leftOf);

  _chai.Assertion.addMethod('inside', inside);

  _chai.Assertion.overwriteMethod('above', function (_super) {
    return function (element) {
      var distance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      if (this._obj.constructor.name === 'jQuery') {
        var source = new Rect(this._obj),
            target = new Rect(element);
        var actual = target.top - source.bottom;
        var targetSelector = getSelector(element);

        if (distance === undefined) {
          return this.assert(actual >= 0, "expected #{this} to be above ".concat(targetSelector), "expected #{this} not to be above ".concat(targetSelector));
        }

        return this.assert(actual === distance || withinThreshold(actual, distance), "expected #{this} to be above ".concat(targetSelector, " by #{exp}, but the value was #{act}"), "expected #{this} not to be above ".concat(targetSelector, " by #{exp}, but the value was #{act}"), distance, actual);
      }

      return _super.apply(this, arguments);
    };
  });

  _chai.Assertion.overwriteMethod('below', function (_super) {
    return function (element) {
      var distance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      if (this._obj.constructor.name === 'jQuery') {
        var source = new Rect(this._obj),
            target = new Rect(element);
        var actual = source.top - target.bottom;
        var targetSelector = getSelector(element);

        if (distance === undefined) {
          return this.assert(actual >= 0, "expected #{this} to be below ".concat(targetSelector), "expected #{this} not to be below ".concat(targetSelector));
        }

        return this.assert(actual === distance || withinThreshold(actual, distance), "expected #{this} to be below ".concat(targetSelector, " by #{exp}, but the value was #{act}"), "expected #{this} not to be below ".concat(targetSelector, " by #{exp}, but the value was #{act}"), distance, actual);
      }

      return _super.apply(this, arguments);
    };
  });
});

var style = (function (_chai, utils) {
  function style(property, value) {
    var actual = this._obj.css(property);

    return this.assert(actual === value, "expected #{this} to have CSS property ".concat(utils.inspect(property), " with the value of #{exp}, but the value was #{act}"), "expected #{this} not to have CSS property ".concat(utils.inspect(property), " with the value #{exp}"), value, actual);
  }

  _chai.Assertion.addMethod('style', style);
});

var overlap = (function (_chai) {
  function overlapping(element) {
    var rect1 = new Rect(this._obj),
        rect2 = new Rect(element); // use <= and >= instead of < and > because regularly flowing elements (not overlapping) have equal bounding values (e.g. left one's right == right one's left)

    var condition = !(rect1.right <= rect2.left || rect1.left >= rect2.right || rect1.bottom <= rect2.top || rect1.top >= rect2.bottom);
    var targetSelector = getSelector(element);
    return this.assert(condition, "expected #{this} to overlap with ".concat(targetSelector, " "), "expected #{this} not to overlap with ".concat(targetSelector));
  }

  _chai.Assertion.addMethod('overlapping', overlapping);
});

var overflow = (function (_chai) {
  function overflowing() {
    var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'any';
    var el = getElement(this._obj);
    var overflowVertical = el.scrollHeight > el.clientHeight;
    var overflowHorizontal = el.scrollWidth > el.clientWidth;
    var condition;

    switch (direction) {
      case 'horizontally':
        condition = overflowHorizontal;
        break;

      case 'vertically':
        condition = overflowVertical;
        break;

      default:
        condition = overflowVertical || overflowHorizontal;
    }

    return this.assert(condition, "expected #{this} to overflow ".concat(direction), "expected #{this} not to overflow ".concat(direction));
  }

  _chai.Assertion.addMethod('overflowing', overflowing);
});

chai.use(alignment);
chai.use(position);
chai.use(style);
chai.use(overlap);
chai.use(overflow);

var dimension = (function (_chai, utils) {
  _chai.Assertion.addChainableMethod('width', function (measure) {
    var source = new Rect(this._obj);
    var actual = source.width;
    return this.assert(actual === measure, "expected #{this} to have width of #{exp}, but the value was #{act}", "expected #{this} not to have width of #{exp}, but the value was #{act}", measure, actual);
  }, function () {
    utils.flag(this, 'element.width', true);
  });

  _chai.Assertion.addChainableMethod('height', function (measure) {
    var source = new Rect(this._obj);
    var actual = source.height;
    return this.assert(actual === measure, "expected #{this} to have height of #{exp}, but the value was #{act}", "expected #{this} not to have height of #{exp}, but the value was #{act}", measure, actual);
  }, function () {
    utils.flag(this, 'element.height', true);
  });
});

chai.use(dimension);

var gt = (function (_chai, utils) {
  _chai.Assertion.overwriteMethod('gt', function (_super) {
    return function (n) {
      var assertWidth = utils.flag(this, 'element.width');
      var assertHeight = utils.flag(this, 'element.height');

      if (assertWidth || assertHeight) {
        var source = new Rect(this._obj);
        var property;
        if (assertWidth) property = 'width';
        if (assertHeight) property = 'height';
        var actual = source[property];
        return this.assert(actual > n, "expected #{this} to have ".concat(property, " greater than #{exp}, but the value was #{act}"), "expected #{this} not to have ".concat(property, " greater than #{exp}, but the value was #{act}"), n, actual);
      }

      return _super.apply(this, arguments);
    };
  });
});

var lt = (function (_chai, utils) {
  _chai.Assertion.overwriteMethod('lt', function (_super) {
    return function (n) {
      var assertWidth = utils.flag(this, 'element.width');
      var assertHeight = utils.flag(this, 'element.height');

      if (assertWidth || assertHeight) {
        var source = new Rect(this._obj);
        var property;
        if (assertWidth) property = 'width';
        if (assertHeight) property = 'height';
        var actual = source[property];
        return this.assert(actual < n, "expected #{this} to have ".concat(property, " less than #{exp}, but the value was #{act}"), "expected #{this} not to have ".concat(property, " less than #{exp}, but the value was #{act}"), n, actual);
      }

      return _super.apply(this, arguments);
    };
  });
});

var within = (function (_chai, utils) {
  _chai.Assertion.overwriteMethod('within', function (_super) {
    return function (start, finish) {
      var assertWidth = utils.flag(this, 'element.width');
      var assertHeight = utils.flag(this, 'element.height');

      if (assertWidth || assertHeight) {
        var source = new Rect(this._obj);
        var property;
        if (assertWidth) property = 'width';
        if (assertHeight) property = 'height';
        var actual = source[property];
        return this.assert(actual >= start && actual <= finish, "expected #{this} to have ".concat(property, " within #{exp}, but the value was #{act}"), "expected #{this} not to have ".concat(property, " within #{exp}, but the value was #{act}"), "".concat(start, " .. ").concat(finish), actual);
      }

      return _super.apply(this, arguments);
    };
  });
});

chai.use(gt);
chai.use(lt);
chai.use(within);

Cypress.Commands.add('configureLayoutInspector', function (config) {
  return configure(config);
});
